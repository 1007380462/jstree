/*
	ANIMATION CAN STOP + SOLUTION (UGLY): https://groups.google.com/forum/?hl=en#!topic/jstree/aICJ5lDD7mE

	HOVERINTENT FOR IE6: https://groups.google.com/forum/?hl=en#!topic/jstree/ebgzgNxLJIg

	when dnd -> use 0 or -1 to prevent opening of nodes!

	native undo (rollback altogether - what to do?)

	create_node perfoemance -> clean_node, create children, etc (rollback is slow)

	destroy : $('#tree').empty().jstree(...) instead of just  $('#tree').jstree(...) 

	https://github.com/deitch/jstree-model-back


	Hello,

	I've been profiling the initialization of a tree in IE using json data
	and in some cases I get the dreaded "script is running slow" dialog in
	IE.

	I tracked the slowness down to the following code and was wondering
	what is was doing and if it was needed?

	In the "clean_node" function the following line

	obj = obj.is("li") ? obj.find("li").andSelf() : obj.find("li");

	when the ".andSelf()" is run in IE8 it is extremly slow.

	When I remove the .andSelf() I don't get the IE slow javascript dialog
	anymore and I can't see any noticeable issues in doing so.

	What is the purpose of including andSelf() in this case as it appears
	to not be needed?
	Thoughts? 


	ALSO - keep only next level visible (PLUGIN) - hide siblings of opened node

	// FAQ - ids, IE quirksmode, JSON headers, cookie reload
	// for IE quirksmode - <meta http-equiv="X-UA-Compatible" content="IE=edge" />
	// move_node от едно място, с гъвкава функция за управление
	// word wrap as a plugin!
	// text wrap http://groups.google.com/group/jstree/browse_thread/thread/a5398532f5e0db4e# (second solution, first will be better!)
	// types open/closed/leaf image (with the new icon classes it should be easy)
	events - maybe a global config?
	// has_children helper function?
	// IE long script: the value is 5 million statements 
	// rename bug http://groups.google.com/group/jstree/browse_thread/thread/758adf7195544b69#
	// json_data - save away other attributes too: http://groups.google.com/group/jstree/browse_thread/thread/e46a8db06d9d129a#
	// xml_data - move the IE timeout to a setting (or POLL unitl ready)
	// wholerow http://groups.google.com/group/jstree/browse_thread/thread/99c06ae58867b0f5#
	// курсора на неизбираемите типове да е текстов а не пойнтър
	if ( tp.select_node !== undefined && tp.select_node !== null &&
	tp.select_node === false) {
	      icons_css += icons_css += '.jstree-' + _this.get_index() + '
	li[' + attr + '=' + i + '] > a {cursor: default;} ';
	} 
	
	Add icon === false ... за скриване на иконата от темите НАПРАВЕНО


	 * STATE PLUGIN?
		state : { 
			open_node	: [],
			select_node	: [],
			check_node	: [],
			listen		: open_node, select_node, check_node (same as above) ... how about uncheck, deselest, close?
		}
		trigger some stuff after "__loaded.jstree" event
		or every plugin with __get_state, __set_state methods?

	 * BEHAVIOR PLUGIN?
		- open parents when a node is opened, but some if its parents are closed
		if(this.get_settings(true).core.open_parents) {
			obj.parentsUntil(".jstree",".jstree-closed").each(function () {
				t.open_node(this, false, true);
			});
		}
		- load nodes marked as open, but which do not have any children
		if(this._get_settings().core.load_open) {
			this.get_container()
				.bind("load_node.jstree", $.proxy(function (e, data) { 
						var o = this._get_node(data.rslt.obj),
							t = this;
						if(o === -1) { o = this.get_container_ul(); }
						if(!o.length) { return; }
						o.find("li.jstree-open:not(:has(ul))").each(function () {
							t.load_node(this, $.noop, $.noop);
						});
					}, this));
		}
		- deselect all when a click is made outside the tree
		var _this = this;
		$(document).bind("click", function (e) {
			if(!$(e.target).parents(".jstree:eq(0)").length) {
				// $.jstree._focused().deselect_all();
				_this.deselect_all();
			}
		});

	* load_node - loading класовете - да е на LI-то
	.jstree-loading .jstree-ocl { background:url(throbber.gif) center center no-repeat }
	is_loading
		 - obj.children("a").addClass("jstree-loading"); // и $.data jstree-loading
		 - obj.children("a").removeClass("jstree-loading");
		 - if no data is returned - change the state of the node - closed to leaf
	* move_node
		 - change open/leaf/closed as needed
	* clean_node - call after load_node / create_node (or special DOM modified event?)
		core		: just check for A node and open/close state (also read the "data" attribute) HTML_TITLES?
		themes		: add the icon
		checkbox	: add the checkbox / the real checkbox
		types		: check the icon, apply the type (read the data)

	UI
				save_selected : function () {
					var _this = this;
					this.data.ui.to_select = [];
					this.data.ui.selected.each(function () { if(this.id) { _this.data.ui.to_select.push("#" + this.id.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.")); } });
					this.__callback(this.data.ui.to_select);
				},
				reselect : function () {
					var _this = this,
						s = this.data.ui.to_select;
					s = $.map($.makeArray(s), function (n) { return "#" + n.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\."); });
					// this.deselect_all(); WHY deselect, breaks plugin state notifier?
					$.each(s, function (i, val) { if(val && val !== "#") { _this.select_node(val); } });
					this.data.ui.selected = this.data.ui.selected.filter(function () { return this.parentNode; });
					this.__callback();
				},
				refresh : function (obj) {
					this.save_selected();
					return this.__call_old();
				},

					.bind("reopen.jstree", $.proxy(function () { 
							this.reselect();
						}, this))
					.bind("get_rollback.jstree", $.proxy(function () { 
							this.dehover_node();
							this.save_selected();
						}, this))
					.bind("set_rollback.jstree", $.proxy(function () { 
							this.reselect();
						}, this))
					.bind("close_node.jstree", $.proxy(function (event, data) { 
							var s = this._get_settings().ui,
								obj = this._get_node(data.rslt.obj),
								clk = (obj && obj.length) ? obj.children("ul").find("a.jstree-clicked") : $(),
								_this = this;
							if(s.selected_parent_close === false || !clk.length) { return; }
							clk.each(function () { 
								_this.deselect_node(this);
								if(s.selected_parent_close === "select_parent") { _this.select_node(obj); }
							});
						}, this))

					.bind("delete_node.jstree", $.proxy(function (event, data) { 
							var s = this._get_settings().ui.select_prev_on_delete,
								obj = this._get_node(data.rslt.obj),
								clk = (obj && obj.length) ? obj.find("a.jstree-clicked") : [],
								_this = this;
							clk.each(function () { _this.deselect_node(this); });
							if(s && clk.length) { 
								data.rslt.prev.each(function () { 
									if(this.parentNode) { _this.select_node(this); return false; // if return false is removed all prev nodes will be selected }
								});
							}
						}, this))

	// contextmenu - remove bind to "destroy.jstree" and move to __destruct
	// replace all calls to _get_settings with get_settings(true)
	// lock / unlock - част от core с bind "before.jstree", така ще бачкат поне системните (обработка на unlock и is_locked)
	// implement rollback as plugin?

	*/

	/* EMPTY PLUGIN
	$.jstree.plugin("<plugin-name>", {
		__construct : function () {
			this;									// the instance
			this.get_container().bind().delegate();	// bind to events as needed
			this.data.<plugin-name> = {};			// create internal variables as needed
			this.get_settings(true).<plugin-name>;	// get the settings

			// `__construct.jstree` - fires after all plugins have finished constructing
			// `__loaded.jstree` - fires after first data is available
		},
		__destruct : function () {
			// do stuff when instance is destroyed
			// no need to take care of `jstree-*` classes `.jstree`
		},
		defaults : {
		}
		_fn : {
			// to change the markup of a node
			clean_node : function(obj) {
				obj = this.__call_old();
				return obj.each(function () { 
					// do your stuff here
				});
				// OR return obj;
			},
			// to preserve check some state
			correct_node : function(obj) {
				obj = this.__call_old();
				// do stuff here
				return obj;
			},
			set_state : function (state, callback) {
				if(this.__call_old()) {
					if(state.your_plugin_data) {
						// do some work

						// if work is done
						delete state.your_plugin_data;
						this.set_state(state, callback);
						return false;

						// otherwise
						return false;
					}
					return true;
				}
				return false;
			},
			get_state : function () {
				var state = this.__call_old();
				state.your_plugin_data = 'some_stuff';
				return state;
			}
		}
	});
*/